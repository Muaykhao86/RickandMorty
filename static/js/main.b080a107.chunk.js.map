{"version":3,"sources":["img/Portal.gif","components/Card.js","components/Box.js","components/Portal.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Card","_ref","Name","Image","Universe","react_default","a","createElement","className","src","alt","Box","PushMe","onClick","Portal","require","Header","charTime","portTime","initialState","name","image","universe","showPort","showChar","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getCharecter","random","Math","floor","url","concat","closePortal","openPortal","cardIsSet","resetChar","resetPortal","fetch","then","response","json","char","setState","clearTimeout","setTimeout","state","components_Header","components_Box","components_Portal","components_Card","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b080a107.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Portal.df87091a.gif\";","import React from 'react';\n\nconst Card = ({Name, Image, Universe}) => {\n\n    \n    return(\n       \n        <div className=\"card\">\n            <div className=\"card-container\">\n                <img className=\"card-image\" src={Image} alt=\"Charecter\"/>\n                    <div className=\"card__details\">\n                        <p className=\"card__details-text\">In Universe C-{Universe} you are</p>\n                        <h2 className=\"card__details-name\">{Name}</h2>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Card;","import React from 'react';\n\nconst Box = ({PushMe}) => {\n    return(\n        <div className=\"box\">\n            <button onClick={PushMe} className=\"box-button\"/>     \n            \n\n        </div>\n    )\n}\n\nexport default Box;","import React from 'react';\n\n\nconst Portal = () => {\n    return(\n        <div className=\"portal\" >\n                <img className=\"portal-image\" src={require('../img/Portal.gif')} alt=\"portal\"/>\n        </div>\n    )\n}\n\nexport default Portal;","import React from 'react';\n\nconst Header = () => {\n    return(\n        <div className=\"Header\">\n            <img className=\"Header__img\" src=\"https://image.ibb.co/hTQdUF/Rick_and_Morty_logo.png\" alt=\"Rick and Morty Logo\"/>\n            <h1 className=\"Header__heading\">Character Generator</h1>\n            <h2 className=\"Header__heading-sub\">Push the button!</h2>\n        </div>\n    )\n}\n\nexport default Header;","import React, {Component} from 'react';\nimport Card from './components/Card';\nimport Box from './components/Box';\nimport Portal from './components/Portal';\nimport Header from './components/Header';\n\nlet charTime = ''; \nlet portTime = '';\n\nconst initialState = {\nname: '',\nimage:'',\nuniverse:'',\nshowPort: false,\nshowChar: false,\n\n};\n\nclass App extends Component{\n    constructor(){\n        super()\n        this.state=initialState;\n      }\n    getCharecter = () => {\n      const random = Math.floor(Math.random() * 394);\n      const url = `https://rickandmortyapi.com/api/character/${random}/`;\n      const portalGun = this.openPortal();\n      const showCard = this.cardIsSet();\n      const takeCard = this.resetChar();\n      const closePortal = this.resetPortal();\n      \n      \n      return(\n        fetch(url)\n        .then(response => response.json())\n        .then(char => this.setState({name:char.name, image: char.image, universe:[random + 135], showChar:true})),\n        portalGun,\n        showCard,\n        takeCard,\n        closePortal\n        )\n      }\n      \n      resetPortal = () => {\n        clearTimeout(portTime);\n        portTime = setTimeout(()=> {this.setState({showPort: false})}, 10000);\n      }\n      resetChar = () => {\n        clearTimeout(charTime);\n        charTime = setTimeout(()=> {this.setState({showChar: false})}, 8000);\n        }\n        \n        openPortal = () => {\n          return this.state.showPort === false ?  this.setState({showPort: true}): null;\n        }\n        \n        cardIsSet = () => {\n          return this.state.showChar === false && this.state.image ?  this.setState({showChar: true}): null;\n        }\n        \n       \n        render() {\n\n        return(\n            <div className=\"container\">\n            <Header/>\n            <Box PushMe={this.getCharecter}/>\n            {this.state.showPort ? <Portal/> : null}\n            {this.state.showChar ? <Card Name={this.state.name} Image={this.state.image} Universe={this.state.universe}/>:null}\n            </div>\n        )\n    }\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport './App.scss';\n\n\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}